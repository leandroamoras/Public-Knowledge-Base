DerrickRose_MP <- c(1168,1168,1168,3000,2871,3026,1375,0,311,1530)
DwayneWade_MP <- c(2892,1931,1954,3048,2792,2823,1625,2391,1775,1971)
#Matrix
MinutesPlayed <- rbind(KobeBryant_MP, JoeJohnson_MP, LeBronJames_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, ChrisPaul_MP, KevinDurant_MP, DerrickRose_MP, DwayneWade_MP)
rm(KobeBryant_MP, JoeJohnson_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, LeBronJames_MP, ChrisPaul_MP, DerrickRose_MP, DwayneWade_MP, KevinDurant_MP)
colnames(MinutesPlayed) <- Seasons
rownames(MinutesPlayed) <- Players
#Field Goals
KobeBryant_FG <- c(978,813,775,800,716,740,574,738,31,266)
JoeJohnson_FG <- c(632,536,647,620,635,514,423,445,462,446)
LeBronJames_FG <- c(875,772,794,789,768,758,621,765,767,624)
CarmeloAnthony_FG <- c(756,691,728,535,688,684,441,669,743,358)
DwightHoward_FG <- c(468,526,583,560,510,619,416,470,473,251)
ChrisBosh_FG <- c(549,543,507,615,600,524,393,485,492,343)
ChrisPaul_FG <- c(407,381,630,631,314,430,425,412,406,568)
KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
#Field Goal Attempts
KobeBryant_FGA <- c(2173,1757,1690,1712,1569,1639,1336,1595,73,713)
JoeJohnson_FGA <- c(1395,1139,1497,1420,1386,1161,931,1052,1018,1025)
LeBronJames_FGA <- c(1823,1621,1642,1613,1528,1485,1169,1354,1353,1279)
CarmeloAnthony_FGA <- c(1572,1453,1481,1207,1502,1503,1025,1489,1643,806)
DwightHoward_FGA <- c(881,873,974,979,834,1044,726,813,800,423)
ChrisBosh_FGA <- c(1087,1094,1027,1263,1158,1056,807,907,953,745)
ChrisPaul_FGA <- c(947,871,1291,1255,637,928,890,856,870,1170)
KevinDurant_FGA <- c(647,647,1366,1390,1668,1538,1297,1433,1688,467)
DerrickRose_FGA <- c(436,436,436,1208,1373,1597,695,0,164,835)
DwayneWade_FGA <- c(1413,962,937,1739,1511,1384,837,1093,761,1084)
#Matrix
FieldGoalAttempts <- rbind(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
rm(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
colnames(FieldGoalAttempts) <- Seasons
rownames(FieldGoalAttempts) <- Players
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
Games
row.names(Games) #Exibindo os nomes das linhas da matriz Games
colnames(Games)  #Exibindo os nomes das colunas da matriz Games
Games["LeBronJames", "2012"]  #achando numero de jogos de LeBron James em 2012
FieldGoals
round(FieldGoals / Games, 1)
MinutesPlayed / Games
round(MinutesPlayed / Games) #Media de minutos jogados por partida
Salary / Games
Salary / Games
round(Salary / Games,1)
round(Salary / Games,3)
round(Points / Games)
A <- round(Points / Games)
max(A)
max(A[,"2005"])
max(A[,"2005":"2014"])
max(column(A["2005":"2014"])
max(column(A["2005":"2014"])
max(column(A)
maxA)
max(A)
A <- round(Points / Games)
A
max(A[,"2005","2006"])
max(A[,"2005";"2006"])
max(A[,"2005":"2006"])
max(A[,"2005"],A[,"2006"],A[,"2007"])
rm(A)
?matplot()
A <- Points / Games
A
A
A <- round(Points / Games)
A
?col
B <- max(col(A))
B
typeof(A)
for (i in A){
print(max(A))
}
matplot(FieldGoals)
matplot(FieldGoals)
#Transpor uma Matriz, (Inveter colunas e linhas)
FieldGoals
#Transpor uma Matriz, (Inveter colunas e linhas)
FieldGoals
t(FieldGoals)
t(FieldGoals)
t(FieldGoals) #Agora as colunas são linhas e as linhas são colunas
#Transpor uma Matriz, (Inveter colunas e linhas)
FieldGoals
t(FieldGoals) #Agora as colunas são linhas e as linhas são colunas
matplot(t(FieldGoals))
matplot(t(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
matplot(t(FieldGoals), type="a", pch=15:18, col=c(1:4,6))
matplot(t(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players, col=c(1:4,6), pch=15:18,horiz = F)
matplot(t(FieldGoals/Games), type="b", pch=15:18, col=c(1:4,6)) #criando um puta de um matplot
legend("bottomleft", inset = 0.01, legend = Players, col=c(1:4,6), pch=15:18,horiz = F)
matplot(t(Points/Games), type="b", pch=15:18, col=c(1:4,6)) #criando um puta de um matplot
legend("bottomleft", inset = 0.01, legend = Players, col=c(1:4,6), pch=15:18,horiz = F)
matplot(t(Points/Games), type="b", pch=15:18, col=c(1:4,6)) #criando um puta de um matplot
legend("bottomleft", inset = 0.01, legend = Players, col=c(1:4,6), pch=15:18,horiz = F)
x <- c("a", "b", "c", "d", "e")
x
x[c(1,5)]
x[1]                                #Extraindo elemento 1
Games
Games[1:3,6:10]
Games[c(1,10),]
Games[,c("2008","2009")]
Games[1,]
Games[1,5]
is.matrix(Games[1,])
is.vector(Games[1,])
#Solução
Games[1,,drop[1,]]
#Solução
Games[1,,drop=F]
Games[1,5,drop=F]
Data <- MinutesPlayed[1:3,]                         #Pegando da primeira a terceira linha
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6)) #criando um puta de um matplot
legend("bottomleft", inset = 0.01, legend = Players[1:3], col=c(1:4,6), pch=15:18,horiz = F)
Data <- MinutesPlayed[1,,drop=F]                         #Pegando da primeira linha
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6)) #criando um puta de um matplot
legend("bottomleft", inset = 0.01, legend = Players[1], col=c(1:4,6), pch=15:18,horiz = F)
myplot <- function(){
Data <- MinutesPlayed[1,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[1], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot()
myplot()
myplot <- function(){
Data <- MinutesPlayed[2,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[2], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot()
myplot <- function(){
Data <- MinutesPlayed[2:3,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[2:3], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot()
myplot <- function(rows){
Data <- MinutesPlayed[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[rows], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot(1:5)  #Ao rodar a função é exculta o codigo
myplot <- function(rows){
Data <- MinutesPlayed[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[rows], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot(1:10)
Data <- Points[rows,,drop=F]
myplot <- function(rows){
Data <- Points[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[rows], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot(1:10)  #Ao rodar a função é exculta o codigo
myplot(Salary, 1:10)  #Ao rodar a função é exculta o codigo
myplot <- function(data, rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[rows], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot(Salary, 1:10)
myplot <- function(data, rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[rows], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot(Salary, 1:10)
myplot(Salary, 1:10)
myplot(Salary, 1:2)  #Ao rodar a função é exculta o codigo
myplot <- function(data, rows=1:10){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset = 0.01, legend = Players[rows], col=c(1:4,6), pch=15:18,horiz = F)
}
myplot(Salary)  #Ao rodar a função é exculta o codigo
myplot(Salary/Games)  #Ao rodar a função é exculta o codigo
myplot(Salary/MinutesPlayed)  #Ao rodar a função é exculta o codigo
myplot(Games)  #Ao rodar a função é exculta o codigo
#Salrio
myplot(Salary)                              #Salario dos jogadores
#Salrio
myplot(Salary)                              #Salario dos jogadores
#Salrio
myplot(Salary)                              #Salario dos jogadores
myplot(Salary / Games)                      #Salario por jogo
myplot(Salary / FieldGoals)                 #Salario por pontos de 3
#Metricas do jogo
myplot(MinutesPlayed)                       #Minutos jogados
myplot(Points)                              #Pontos
#Metricas de jogo normalizadas
myplot(FieldGoals / Games)                  #Pontos de 3 por jogo
myplot(FieldGoals / FieldGoalAttempts)      #Pontos de 3 por arremeço
myplot(FieldGoalAttempts / Games)           #Arremeço por jogo
myplot(Points / Games)                      #Pontos por jogo
#ObservaçÕes interesantes
myplot(MinutesPlayed / Games)               #Minutos jogados por jogo
myplot(Games)                               #Jogos
#Tempo é valioso
myplot(FieldGoals / MinutesPlayed)          #Pontos de 3 por minuto jogado
#Player Style
myplot(Points / FieldGoals)                 #Pontos por pontos de 3
stats <- read.csv(file.choose())
stats
#Metodo 2
getwd()
setwd("C:/Users/leandro.amoras/Desktop/R programming A-Z")
getwd()
source('~/.active-rstudio-document', echo=TRUE)
stats <- read.csv("DemographicData.csv")
stats
View(stats)
#________________________________________Explorando dados
stats
nrow(stats)
ncol(stats)
head(stats)
head(stats, n=10)                        #Mostra as 10 primeiras linhas
str(stats)
#________________________________________Usando $ sing
stats #
stats[3,3]  #Extraindo elemento da linha 3, coluna 3
stats[3, "Brith.rate"]
stats[3, "Birth.rate"]
stats$Internet.users
stats$Internet.users[2]     #Acessando segundo elemento da coluna Internet.users com $
stats[,"internet.users"]
stats[,"Internet.users"]
levels(stats$Internet.users)
levels(stats$Internet.users)
levels(stats$Income.Group)
#__________________________________________Operações com DataFrame
stats[1:10,]       #olhando as 10 primeiras linhas
statas[3:9,]       #olhando da linha 3 a linha 9
stats[3:9,]       #olhando da linha 3 a linha 9
stats[c(4,100),]   #Comparando linha 4 com linha 100
#Lembrando como {} trabalha:
stats[1,]
is.data.frame(stats[1,])     #Já no DF isso continua sendo um DF
is.vector(stats[,1])
is.list(stats[,1])
is.data.frame(stats[,1])
is.matrix(stats[,1])
is.matrix(stats[,1,drop=F])         #drop=F transforma em DataFrame
is.data.frame(stats[,1,drop=F])         #drop=F transforma em DataFrame
#multiplicando colunas
head(stats)
stats$Birth.rate * stats$Internet.users
stats$Birth.rate + stats$Internet.users
#Testando conhecimento
stats$xyz <- 1:4
#Testando conhecimento
stats$xyz <- 1:5
head(stats, n=12)
#Adcionando Coluna
head(stats)
stats$MyCalc <- stats$Birth.rate * stats$Internet.users #Criando nova coluna
#Removendo colunas
head(stats)
stats$MyCalc <- NULL   #Exclui
stats$xyz <- NULL     #Exclui
#Removendo colunas
head(stats)
#__________________________________________ Filtrando DataFrame
head(stats)
filter <- stats$Internet.users < 2
#__________________________________________ Filtrando DataFrame
head(stats)
filter <- stats$Internet.users < 2
stats[filter,]
stats[stats$Birth.rate > 40]
stats[stats$Birth.rate > 40,]               #Mostrando brith.rates maiores que 40
stats[stats$Birth.rate > 40 & stats$Internet.users < 2]
stats[stats$Birth.rate > 40 & stats$Internet.users < 2,]
stats[stats$Birth.rate > 40 & stats$Internet.users < 2,] #Mostrando linhas onde birth rate é maior que 40 e internet users é menor que 2
stats[stats$Income.Group == "High income"]
stats[stats$Income.Group == "High income",]
levels(stats$Income.Group)
head(stats)
stats[stats$Country.Name == "Malta",]
#__________________________________________ Introdução ao Qplot
#install.packages("ggplot2")                #Instale se não tiver
library(ggplot2)
?qplot
#Criando um qplot
qplot(data = stats, x= Internet.users)
qplot(data=stats, x=Income.Group, y=Birth.rate)
qplot(data=stats, x=Income.Group, y=Birth.rate, size=I(3))
qplot(data=stats, x=Income.Group, y=Birth.rate, size=I(3),
colour=I("blue"))
qplot(data=stats, x=Income.Group, y=Birth.rate, geom= "boxplot")
#__________________________________________ Visualizando o que preciso
qplot(data=stats, x=Internet.users, y=Birth.rate)
qplot(data=stats, x=Internet.users, y=Birth.rate,
size=I(4))
qplot(data=stats, x=Internet.users, y=Birth.rate,
colour=I("red"), size=I(4))
qplot(data=stats, x=Internet.users, y=Birth.rate,
colour=Income.Group, size=I(5))
#Execute below code to generate three new vectors
Countries_2012_Dataset <- c("Aruba","Afghanistan","Angola","Albania","United Arab Emirates","Argentina","Armenia","Antigua and Barbuda","Australia","Austria","Azerbaijan","Burundi","Belgium","Benin","Burkina Faso","Bangladesh","Bulgaria","Bahrain","Bahamas, The","Bosnia and Herzegovina","Belarus","Belize","Bermuda","Bolivia","Brazil","Barbados","Brunei Darussalam","Bhutan","Botswana","Central African Republic","Canada","Switzerland","Chile","China","Cote d'Ivoire","Cameroon","Congo, Rep.","Colombia","Comoros","Cabo Verde","Costa Rica","Cuba","Cayman Islands","Cyprus","Czech Republic","Germany","Djibouti","Denmark","Dominican Republic","Algeria","Ecuador","Egypt, Arab Rep.","Eritrea","Spain","Estonia","Ethiopia","Finland","Fiji","France","Micronesia, Fed. Sts.","Gabon","United Kingdom","Georgia","Ghana","Guinea","Gambia, The","Guinea-Bissau","Equatorial Guinea","Greece","Grenada","Greenland","Guatemala","Guam","Guyana","Hong Kong SAR, China","Honduras","Croatia","Haiti","Hungary","Indonesia","India","Ireland","Iran, Islamic Rep.","Iraq","Iceland","Israel","Italy","Jamaica","Jordan","Japan","Kazakhstan","Kenya","Kyrgyz Republic","Cambodia","Kiribati","Korea, Rep.","Kuwait","Lao PDR","Lebanon","Liberia","Libya","St. Lucia","Liechtenstein","Sri Lanka","Lesotho","Lithuania","Luxembourg","Latvia","Macao SAR, China","Morocco","Moldova","Madagascar","Maldives","Mexico","Macedonia, FYR","Mali","Malta","Myanmar","Montenegro","Mongolia","Mozambique","Mauritania","Mauritius","Malawi","Malaysia","Namibia","New Caledonia","Niger","Nigeria","Nicaragua","Netherlands","Norway","Nepal","New Zealand","Oman","Pakistan","Panama","Peru","Philippines","Papua New Guinea","Poland","Puerto Rico","Portugal","Paraguay","French Polynesia","Qatar","Romania","Russian Federation","Rwanda","Saudi Arabia","Sudan","Senegal","Singapore","Solomon Islands","Sierra Leone","El Salvador","Somalia","Serbia","South Sudan","Sao Tome and Principe","Suriname","Slovak Republic","Slovenia","Sweden","Swaziland","Seychelles","Syrian Arab Republic","Chad","Togo","Thailand","Tajikistan","Turkmenistan","Timor-Leste","Tonga","Trinidad and Tobago","Tunisia","Turkey","Tanzania","Uganda","Ukraine","Uruguay","United States","Uzbekistan","St. Vincent and the Grenadines","Venezuela, RB","Virgin Islands (U.S.)","Vietnam","Vanuatu","West Bank and Gaza","Samoa","Yemen, Rep.","South Africa","Congo, Dem. Rep.","Zambia","Zimbabwe")
Codes_2012_Dataset <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BMU","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYM","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GRL","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ISR","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LIE","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SRB","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYC","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","PSE","WSM","YEM","ZAF","COD","ZMB","ZWE")
Regions_2012_Dataset <- c("The Americas","Asia","Africa","Europe","Middle East","The Americas","Asia","The Americas","Oceania","Europe","Asia","Africa","Europe","Africa","Africa","Asia","Europe","Middle East","The Americas","Europe","Europe","The Americas","The Americas","The Americas","The Americas","The Americas","Asia","Asia","Africa","Africa","The Americas","Europe","The Americas","Asia","Africa","Africa","Africa","The Americas","Africa","Africa","The Americas","The Americas","The Americas","Europe","Europe","Europe","Africa","Europe","The Americas","Africa","The Americas","Africa","Africa","Europe","Europe","Africa","Europe","Oceania","Europe","Oceania","Africa","Europe","Asia","Africa","Africa","Africa","Africa","Africa","Europe","The Americas","The Americas","The Americas","Oceania","The Americas","Asia","The Americas","Europe","The Americas","Europe","Asia","Asia","Europe","Middle East","Middle East","Europe","Middle East","Europe","The Americas","Middle East","Asia","Asia","Africa","Asia","Asia","Oceania","Asia","Middle East","Asia","Middle East","Africa","Africa","The Americas","Europe","Asia","Africa","Europe","Europe","Europe","Asia","Africa","Europe","Africa","Asia","The Americas","Europe","Africa","Europe","Asia","Europe","Asia","Africa","Africa","Africa","Africa","Asia","Africa","Oceania","Africa","Africa","The Americas","Europe","Europe","Asia","Oceania","Middle East","Asia","The Americas","The Americas","Asia","Oceania","Europe","The Americas","Europe","The Americas","Oceania","Middle East","Europe","Europe","Africa","Middle East","Africa","Africa","Asia","Oceania","Africa","The Americas","Africa","Europe","Africa","Africa","The Americas","Europe","Europe","Europe","Africa","Africa","Middle East","Africa","Africa","Asia","Asia","Asia","Asia","Oceania","The Americas","Africa","Europe","Africa","Africa","Europe","The Americas","The Americas","Asia","The Americas","The Americas","The Americas","Asia","Oceania","Middle East","Oceania","Middle East","Africa","Africa","Africa","Africa")
#(c) Kirill Eremenko, www.superdatascience.com
head(mydf)
mydf <- data.frame(Countries_2012_Dataset, Codes_2012_Dataset,
Regions_2012_Dataset)
head(mydf)
head(mydf)
colnames(mydf) <- c("Country", "Code", "Region")
head(mydf) #Visualizando
#colnames(mydf) <- c("Country", "Code", "Region") #Renomeando nome das colunas
rm(mydf) #removendo mydf
mydf <- data.frame(Country=Countries_2012_Dataset, Code=Codes_2012_Dataset,
Region=Regions_2012_Dataset)
head(mydf) #Visualizando
mydf
head(mydf)
tail(mydf)
summary(mydf)
#__________________________________________  Migrando DataFrame
head(stats)
head(mydf)
head(merged)
merged <- (stats, mydf, by.x = "Country.Code", by.y = "Code")
head(merged)
merged$Contry <- NULL #Removendo Contry, pois tem dados semelhantes a Contry code
merged <- (stats, mydf, by.x = "Country.Code", by.y = "Code") #Unidmo DF stats com DF mydf se as colunas correspondentes forem iguais
merged <- (stats, mydf, by.x = "Country.Code", by.y = "Code")
merged <- merge(stats, mydf, by.x = "Country.Code", by.y = "Code") #Unidmo DF stats com DF mydf se as colunas correspondentes forem iguais.
head(merged)
head(merged)
merged$Contry <- NULL #Removendo Contry, pois tem dados semelhantes a Contry code
head(merged)
merged$Contry <- NULL #Removendo Contry, pois tem dados semelhantes a Contry code
head(merged)
merged$Country <- NULL #Removendo Contry, pois tem dados semelhantes a Contry code
head(merged)
head(merged)
str(merged) #Conferindo estrutura
summary(merged)
head(merged)
summary(merged)
qplot(data = merged, x = Income.group, y = Region,
colour =Internet.users, size = I(4))
qplot(data = merged, x = Income.Group, y = Region,
colour =Internet.users, size = I(4))
qplot(data = merged, x = Internet.users, y = Region,
colour = Income.Group, size = I(4))
#Prof
qplo(data = merged, x=Internet.users, y=Birth.rate)
#Prof
qplot(data = merged, x=Internet.users, y=Birth.rate)
qplot(data = merged, x=Internet.users, y=Birth.rate
colour=Region)
qplot(data = merged, x=Internet.users, y=Birth.rate
colour=Region)
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region)
#1- shapes
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region, size=I(5), shape=I(17))
#1- shapes (Muda o formato dos pontos, formatos de 1 a 25)
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region, size=I(5), shape=I(3))
#1- shapes (Muda o formato dos pontos, formatos de 1 a 25)
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region, size=I(5), shape=I(19))
#1- shapes (Muda o formato dos pontos, formatos de 1 a 25)
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region, size=I(5), shape=I(13))
#2 - Transparencia
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region, size=I(5), shape=I(19))
#2 - Transparencia (vai de 0 a 1)
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region, size=I(5), shape=I(19),
alpha=I(0.9))
#2 - Transparencia (vai de 0 a 1)
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region, size=I(5), shape=I(19),
alpha=I(0.3))
qplot(data = merged, x=Internet.users, y=Birth.rate,
colour=Region, size=I(5), shape=I(19),
alpha=I(0.9),
main="Birth Rate vs Internet Users")
#
getwd()
setwd("C:/Users/leandro.amoras/Desktop/R programming A-Z")
getwd()
movies <- read.csv("Movie Ratings.csv")
movies <- read.csv("Movie-Ratings.csv")
movies <- read.csv("Movie-Ratings.csv")
head(movies)
colnames(movies)
colnames(movies) <- c("Film", "Genre", "CriticRating", "AudienceRating", "BudgetMillions", "Year")
head(movies)
tail(movies)
str(movies) #Olhando a estrutura
summary(movies)
summary(movies)
factor(movies$Year)
movies$Year <- factor(movies$Year)
movies$Year <- factor(movies$Year) #Classificando dados de Year em levels
summary(movies)
str(movies)
str(movies)
#_______________________Estetiva
library(ggplot2)
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating))
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) + #com o geom o grafico toma forma
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating, colour=Genre)) +
geom_point()
#Add size
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=Genre)) +
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=Genre)) +
geom_point()
#Add size - melhor caminho
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions)) +
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions)) +
geom_point()
#_________________________Plotando com layers
p <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#Point
P + geom_point()
#Point
p + geom_point()
#Lines
p + geom_line()
#multiple layers
p + geom_line() + geom_point()
#Add geom layer
q + geom_point()
#Overriding aes
#ex1
q + geom_point(aes(size=CriticRating))
q <-  ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#Add geom layer
q + geom_point()
#Overriding aes
#ex1
q + geom_point(aes(size=CriticRating))
#ex2. colour
q + geom_point(aes(colour=BudgetMillions))
#Voltando plot ao original
q + geom_point()
#ex3
q + geom_point(aes(x=BudgetMillions))
#ex3. localização
q + geom_point(aes(x=BudgetMillions))
#ex3. localização
q + geom_point(aes(x=BudgetMillions)) +
xlab("Budget Millions $$$")
p + geom_line(size=1) + geom_point()
s <- ggplot(data = movies, aes(x=BudgetMillions))
s + geom_histogram(binwidth = 10)
#add colour
s + geom_histogram(binwidth = 10, aes(fill=Gener))
#add colour
s + geom_histogram(binwidth = 10, aes(fill=Gener))
#add colour
s + geom_histogram(binwidth = 10, aes(fill=Genre))
#add a border
s + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black"
#add a border
s + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
#add a border
s + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
#As vezes voce precisa adicionar densidade
s + geom_density(aes(fill=Genre))
s + geom_density(aes(fill=Genre), position="stack")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth=10,
fill="White", colour="Blue")
t + geom_histogram(binwidth = 10,
aes(x=AudienceRating),
fill="White", colour="Blue")
